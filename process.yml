# Orb 'circleci/windows@2.2.0' resolved to 'circleci/windows@2.2.0'
version: 2
jobs:
  buildDocker:
    docker:
    - image: cimg/openjdk:11.0
    resource_class: medium
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - setup_remote_docker
    - run:
        name: hadoLint_openjdk_11
        command: |
          docker run --rm -i hadolint/hadolint < docker/openjdk-11/Dockerfile
    - run:
        name: hadoLint_openjdk_11_debug
        command: |
          docker run --rm -i hadolint/hadolint < docker/openjdk-11-debug/Dockerfile
    - run:
        name: hadoLint_openjdk_latest
        command: |
          docker run --rm -i hadolint/hadolint < docker/openjdk-latest/Dockerfile
    - run:
        name: hadoLint_graalvm
        command: |
          docker run --rm -i hadolint/hadolint < docker/graalvm/Dockerfile
    - run:
        name: build image
        command: |
          ./gradlew --no-daemon distDocker
    - run:
        name: test image
        command: |
          mkdir -p docker/reports
          curl -L https://github.com/aelsabbahy/goss/releases/download/v0.3.9/goss-linux-amd64 -o ./docker/tests/goss-linux-amd64
          ./gradlew --no-daemon testDocker
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
  unitTests:
    docker:
    - image: cimg/openjdk:11.0
    resource_class: xlarge
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: Build
        no_output_timeout: 20m
        command: |
          ./gradlew --no-daemon build
    - run:
        name: Jacoco
        command: |
          ./gradlew --no-daemon jacocoTestReport
    - run:
        name: Gather test results
        when: always
        command: |
          FILES=`find . -name test-results`
          for FILE in $FILES
          do
            MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
            TARGET="build/test-results/$MODULE"
            mkdir -p "$TARGET"
            cp -rf ${FILE}/*/* "$TARGET"
          done
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: besu/build/reports/jacoco
    - run:
        name: SonarQube
        no_output_timeout: 30m
        command: ./gradlew --no-daemon jacocoRootReport sonarqube -Dsonar.login=$SONAR_TOKEN
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4
  testWindows:
    machine:
      image: windows-server-2019-vs2019:stable
    steps:
    - attach_workspace:
        at: ~/project
    - run:
        name: Unzip Windows build
        no_output_timeout: 20m
        command: |
          cd build/distributions
          unzip besu-*.zip -d besu-tmp
          cd besu-tmp
          mv besu-* ../besu
    - run:
        name: Test Besu Windows executable
        no_output_timeout: 10m
        command: |
          build\distributions\besu\bin\besu.bat --help
          build\distributions\besu\bin\besu.bat --version
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass
  assemble:
    docker:
    - image: cimg/openjdk:11.0
    resource_class: xlarge
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - run:
        name: DCO check
        command: |
          ./scripts/dco_check.sh
    - run:
        name: Assemble
        command: |
          ./gradlew --no-daemon clean spotlessCheck compileJava compileTestJava assemble
    - save_cache:
        name: Caching gradle dependencies
        key: deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - .gradle
        - ~/.gradle
    - persist_to_workspace:
        root: ~/project
        paths:
        - ./
    - store_artifacts:
        name: Distribution artifacts
        path: build/distributions
        destination: distributions
        when: always
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4
  dockerScan:
    docker:
    - image: docker:stable-git
    resource_class: small
    working_directory: ~/project
    steps:
    - checkout
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Install trivy
        command: |
          apk add --update-cache --upgrade curl bash
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - run:
        name: Scan with trivy
        shell: /bin/sh
        command: |
          for FILE in $(ls docker)
          do
            if [[ $FILE == "test.sh" || $FILE == "tests" ]]; then
              continue
            fi
            docker pull -q "hyperledger/besu:develop-$FILE"
            trivy -q image --exit-code 1 --no-progress --severity HIGH,CRITICAL "hyperledger/besu:develop-$FILE"
          done
  acceptanceTests:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: xlarge
    parallelism: 6
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: AcceptanceTests
        no_output_timeout: 30m
        command: |
          CLASSNAMES=$(circleci tests glob "acceptance-tests/tests/src/test/java/**/*.java" \
            | sed 's@.*/src/test/java/@@' \
            | sed 's@/@.@g' \
            | sed 's/.\{5\}$//' \
            | circleci tests split --split-by=timings --timings-type=classname)
          # Format the arguments to "./gradlew test"
          GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
          ./gradlew --no-daemon acceptanceTest $GRADLE_ARGS
    - run:
        name: Jacoco
        command: |
          ./gradlew --no-daemon jacocoTestReport
    - run:
        name: Gather test results
        when: always
        command: |
          FILES=`find . -name test-results`
          for FILE in $FILES
          do
            MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
            TARGET="build/test-results/$MODULE"
            mkdir -p "$TARGET"
            cp -rf ${FILE}/*/* "$TARGET"
          done
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: besu/build/reports/jacoco
    - store_artifacts:
        path: acceptance-tests/tests/build/acceptanceTestLogs
        destination: acceptance-tests-logs
    - store_artifacts:
        path: acceptance-tests/tests/build/jvmErrorLogs
  publish:
    docker:
    - image: cimg/openjdk:11.0
    resource_class: medium
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: Publish
        command: |
          ./gradlew --no-daemon artifactoryPublish
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
  integrationTests:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: IntegrationTests
        command: |
          ./gradlew --no-daemon integrationTest
    - run:
        name: Javadoc
        command: |
          ./gradlew --no-daemon javadoc
    - run:
        name: CompileJmh
        command: |
          ./gradlew --no-daemon compileJmh
    - run:
        name: Jacoco
        command: |
          ./gradlew --no-daemon jacocoTestReport
    - run:
        name: Gather test results
        when: always
        command: |
          FILES=`find . -name test-results`
          for FILE in $FILES
          do
            MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
            TARGET="build/test-results/$MODULE"
            mkdir -p "$TARGET"
            cp -rf ${FILE}/*/* "$TARGET"
          done
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: besu/build/reports/jacoco
  publishDocker:
    docker:
    - image: cimg/openjdk:11.0
      user: root
    resource_class: medium
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - setup_remote_docker
    - run:
        name: Install Buildx base on CPU architecture
        command: "BUILDX_ARCH=\"linux-amd64\"\nBUILDX_VERSION=\"v0.7.0\"\nmkdir -p ~/.docker/cli-plugins\nwget -nv -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.${BUILDX_ARCH}  \nchmod a+x ~/.docker/cli-plugins/docker-buildx\ncurl -L https://github.com/regclient/regclient/releases/latest/download/regctl-${BUILDX_ARCH} >regctl\nchmod 755 regctl\n"
    - run:
        name: Publish Docker
        command: |
          docker login registry.gitlab.com --username pipeline --password GXf7u3sx-AyoUnCegeFy

          docker context create builder-context
          docker buildx create --name builderx --driver docker-container --use builder-context

          ./gradlew --no-daemon "-Pbranch=${CIRCLE_BRANCH}" dockerPublishMultiCPU
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
  acceptanceTestsQuorum:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: xlarge
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: Quorum Acceptance Tests
        no_output_timeout: 40m
        command: ./gradlew --no-daemon acceptanceTestsQuorum
    - store_artifacts:
        path: build/quorum-at
        destination: quorum-at-artifacts
    - store_test_results:
        path: build/quorum-at/openjdk-latest/reports/xml-report
  referenceTests:
    docker:
    - image: cimg/openjdk:11.0
    resource_class: xlarge
    working_directory: ~/project
    steps:
    - checkout
    - run:
        name: Install Packages - LibSodium, nssdb
        command: |
          sudo apt-get update
          sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https haveged libnss3-tools
          sudo service haveged restart
    - restore_cache:
        name: Restore cached gradle dependencies
        keys:
        - deps-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
        - deps-{{ checksum "gradle/versions.gradle" }}
        - deps-
    - attach_workspace:
        at: ~/project
    - run:
        name: ReferenceTests
        no_output_timeout: 30m
        command: |
          git submodule update --init --recursive
          ./gradlew --no-daemon referenceTest
    - run:
        name: Jacoco
        command: |
          ./gradlew --no-daemon jacocoTestReport
    - run:
        name: Gather test results
        when: always
        command: |
          FILES=`find . -name test-results`
          for FILE in $FILES
          do
            MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
            TARGET="build/test-results/$MODULE"
            mkdir -p "$TARGET"
            cp -rf ${FILE}/*/* "$TARGET"
          done
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: besu/build/reports/jacoco
    environment:
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4
workflows:
  version: 2
  default:
    jobs:
    - assemble
    - unitTests:
        requires:
        - assemble
        context: SonarCloud
    - testWindows:
        requires:
        - assemble
    - referenceTests:
        requires:
        - assemble
    - integrationTests:
        requires:
        - assemble
    - acceptanceTests:
        requires:
        - assemble
    - buildDocker:
        requires:
        - assemble
    - publish:
        filters:
          branches:
            only:
            - main
            - /^release-.*/
        requires:
        - integrationTests
        - unitTests
        - acceptanceTests
        - referenceTests
        - buildDocker
    - publishDocker:
        filters:
          branches:
            only:
            - main
            - /^release-.*/
        requires:
        - integrationTests
        - unitTests
        - acceptanceTests
        - referenceTests
        - buildDocker
        context:
        - besu-dockerhub-ro
        - besu-dockerhub-rw
        - besu-acr-rw
  nightly:
    triggers:
    - schedule:
        cron: 0 19 * * *
        filters:
          branches:
            only:
            - main
    jobs:
    - assemble
    - acceptanceTestsQuorum:
        requires:
        - assemble
    - dockerScan
notify:
  webhooks:
  - url: $HUBOT_URL
