name: pre-review

on:
  pull_request:
  workflow_dispatch:

env:
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

jobs:
  repolint:
    name: "Repository Linting"
    runs-on: ubuntu-22.04
    container: ghcr.io/todogroup/repolinter:v0.11.2
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Lint Repo
      run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/main/repo_structure/repolint.json --format markdown
  gradle-wrapper:
    name: "Gradle Wrapper Validation"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1.1.0
  spotless:
    runs-on: ubuntu-22.04
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.10.0
      - name: run spotless
        run: ./gradlew spotlessCheck -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  compile:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [spotless, gradle-wrapper, repolint]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.10.0
      - name: Gradle Compile
        run: ./gradlew build -x test -x spotlessCheck -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  unitTests:
    runs-on: ubuntu-22.04
    needs: [ compile ]
    permissions:
      checks: write
    strategy:
      fail-fast: false
      matrix:
        ci_node_index:
          - 0
          - 1
          - 2
          - 3
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.10.0
      - name: Download existing test timings
        uses: dawidd6/action-download-artifact@v2
        with:
          name: junit-xml-reports
          path: tmp/junit-xml-reports-downloaded
          if-no-artifact-found: ignore
      - uses: r7kamura/split-tests-by-timings@v0
        id: split-tests
        with:
          reports: tmp/junit-xml-reports-downloaded
          glob: "**/src/test/java/**/*.java"
          index: ${{ matrix.ci_node_index }}
          total: 4
      - name: write out test list
        run: echo "${{ steps.split-tests.outputs.paths }}" >> testList.txt
      - name: debug testfile paths
        run: cat testList.txt
      - name: format gradle args
        # regex means: truncate file paths to align with package name, replacing with tests switch, then drop file extension,
        # then swap path delimiter with package delimiter
        run: cat testList.txt | sed -e 's/[^ ]*src\/test\/java\//--tests\ /g' -e 's/\.java//g' -e 's/\//\./g' >> gradleArgs.txt
      - name: debug test class list
        run: cat gradleArgs.txt
      - name: run unit tests
        run: ./gradlew test `cat gradleArgs.txt` -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: junit-xml-reports
          path: '**/build/test-results/test/TEST-*.xml'
          retention-days: 1
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the build step fails
        with:
          report_paths: '**/test-results/test/TEST-*.xml'
          annotate_only: true
